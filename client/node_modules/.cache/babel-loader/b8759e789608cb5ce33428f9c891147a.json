{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Container,Form,Button}from\"react-bootstrap\";import\"../styles/CreateMemePage.css\";import Meme from\"../components/Meme/\";import{useAuth}from\"../contexts/AuthContext\";import API from\"../utils/API\";var objectToQueryParam=function objectToQueryParam(obj){var params=Object.entries(obj).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return\"\".concat(key,\"=\").concat(value);});return'?'+params.join(\"&\");};export default function CreateMemePage(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),templates=_useState2[0],setTemplates=_useState2[1];//tmeplates stores all the meme img's retrieved from API\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),template=_useState4[0],setTemplate=_useState4[1];//template stores which image the user chose to use\nvar _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),topText=_useState6[0],setTopText=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),bottomText=_useState8[0],setBottomText=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),title=_useState10[0],setTitle=_useState10[1];//to get the current user\nvar _useAuth=useAuth(),currentUser=_useAuth.currentUser;useEffect(function(){fetch(\"https://api.imgflip.com/get_memes\").then(function(x){return x.json().then(function(res){return setTemplates(res.data.memes);});});},[]);function handleSubmit(_x){return _handleSubmit.apply(this,arguments);}function _handleSubmit(){_handleSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var params,response,data,userEmail,memes;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();console.log(\"pressed\");params={template_id:template.id,text0:topText,text1:bottomText,username:\"MemePost\",password:\"memePost001\"};//will take all the parameters needed to make the meme and send it to their api\n_context.next=5;return fetch(\"https://api.imgflip.com/caption_image\".concat(objectToQueryParam(params)));case 5:response=_context.sent;console.log(title);//url of finished meme from API\n_context.next=9;return response.json();case 9:data=_context.sent;console.log(data.data.url);//get the current user\nuserEmail={user:currentUser.email};console.log(userEmail);if(title&&data&&userEmail){memes={title:title,meme:data.data.url,user:userEmail.user};console.log(memes);API.createMeme(memes).then(function(){return console.log(\"meme made\");}).catch(function(err){return console.log(err);});}case 14:case\"end\":return _context.stop();}}},_callee);}));return _handleSubmit.apply(this,arguments);}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Create a Meme\"),/*#__PURE__*/React.createElement(Container,{fluid:true,className:\"meme-display-container\"},template&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Meme,{template:template}),/*#__PURE__*/React.createElement(Form,{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(Form.Group,{id:\"title\"},/*#__PURE__*/React.createElement(Form.Label,null,\"Title\"),/*#__PURE__*/React.createElement(Form.Control,{placeholder:\"Title of Meme\",onChange:function onChange(e){return setTitle(e.target.value);},value:title})),/*#__PURE__*/React.createElement(Form.Group,{id:\"top-text\"},/*#__PURE__*/React.createElement(Form.Label,null,\"Top-Text\"),/*#__PURE__*/React.createElement(Form.Control,{placeholder:\"top-text\",onChange:function onChange(e){return setTopText(e.target.value);},value:topText})),/*#__PURE__*/React.createElement(Form.Group,{id:\"bottom-text\"},/*#__PURE__*/React.createElement(Form.Label,null,\"Bottom-Text\"),/*#__PURE__*/React.createElement(Form.Control,{placeholder:\"bottom-text\",onChange:function onChange(e){return setBottomText(e.target.value);},value:bottomText})),/*#__PURE__*/React.createElement(Button,{className:\"btn btn-primary\",type:\"submit\"},\"Create Meme\"))),!template&&templates.map(function(template){return/*#__PURE__*/React.createElement(\"img\",{className:\"meme-img ml-2 mt-2\",key:template.id,src:template.url,alt:template.name,onClick:function onClick(){setTemplate(template);}});})));}","map":{"version":3,"sources":["C:/Users/Siraceddin/Desktop/HTML STUFF/HW/project-3/client/src/pages/CreateMemePage.js"],"names":["React","useEffect","useState","Container","Form","Button","Meme","useAuth","API","objectToQueryParam","obj","params","Object","entries","map","key","value","join","CreateMemePage","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","title","setTitle","currentUser","fetch","then","x","json","res","data","memes","handleSubmit","event","preventDefault","console","log","template_id","id","text0","text1","username","password","response","url","userEmail","user","email","meme","createMeme","catch","err","e","target","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport {Container, Form, Button} from \"react-bootstrap\";\r\nimport \"../styles/CreateMemePage.css\";\r\nimport Meme from \"../components/Meme/\";\r\nimport {useAuth} from \"../contexts/AuthContext\";\r\nimport API from \"../utils/API\";\r\n\r\nconst objectToQueryParam = (obj) => {\r\n    const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`)\r\n    return '?' + params.join(\"&\")\r\n}\r\n\r\nexport default function CreateMemePage() {\r\n\r\n    \r\n    const [templates, setTemplates] = useState([]); //tmeplates stores all the meme img's retrieved from API\r\n    const [template, setTemplate] = useState(null); //template stores which image the user chose to use\r\n    const [topText, setTopText] = useState('');\r\n    const [bottomText, setBottomText] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    \r\n\r\n    //to get the current user\r\n    const {currentUser} = useAuth();\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(x => x.json().then(res => setTemplates(res.data.memes))\r\n        );\r\n    }, []);\r\n\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        console.log(\"pressed\");\r\n\r\n        const params = {\r\n            template_id: template.id,\r\n            text0: topText,\r\n            text1: bottomText,\r\n            username: \"MemePost\",\r\n            password: \"memePost001\"\r\n\r\n        }\r\n\r\n        //will take all the parameters needed to make the meme and send it to their api\r\n        const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\r\n\r\n\r\n        console.log(title);\r\n\r\n        //url of finished meme from API\r\n        const data = await response.json()\r\n        console.log(data.data.url);\r\n\r\n        //get the current user\r\n        const userEmail = {\r\n            user: currentUser.email\r\n        }\r\n        console.log(userEmail);\r\n\r\n        if(title && data && userEmail) {\r\n            let memes = {\r\n                title: title,\r\n                meme: data.data.url,\r\n                user: userEmail.user\r\n            }\r\n            console.log(memes);\r\n           API.createMeme(memes)\r\n            .then(() => console.log(\"meme made\"))\r\n            .catch((err) => console.log(err))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Create a Meme</h1>\r\n            <Container fluid className=\"meme-display-container\">\r\n                {template && (\r\n                    <>\r\n                        <Meme template={template}/>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"title\">\r\n                                <Form.Label>Title</Form.Label>\r\n                                <Form.Control placeholder=\"Title of Meme\" onChange={e => setTitle(e.target.value)} value={title}/>\r\n                            </Form.Group>\r\n                            <Form.Group id=\"top-text\">\r\n                                <Form.Label>Top-Text</Form.Label>\r\n                                <Form.Control placeholder=\"top-text\" onChange={e => setTopText(e.target.value)} value={topText}/>\r\n                            </Form.Group>\r\n                            <Form.Group id=\"bottom-text\">\r\n                                <Form.Label>Bottom-Text</Form.Label>\r\n                                <Form.Control  placeholder=\"bottom-text\"  onChange={e => setBottomText(e.target.value)} value={bottomText}/>\r\n                            </Form.Group>\r\n                            <Button className=\"btn btn-primary\" type=\"submit\">Create Meme</Button>\r\n                        </Form>\r\n                  </>\r\n                )}\r\n                {!template && templates.map((template) => {\r\n                    return (\r\n                        <img             \r\n                            className=\"meme-img ml-2 mt-2\" \r\n                            key={template.id} \r\n                            src={template.url} \r\n                            alt={template.name}\r\n                            onClick={() => {\r\n                                setTemplate(template)\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n            </Container>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}