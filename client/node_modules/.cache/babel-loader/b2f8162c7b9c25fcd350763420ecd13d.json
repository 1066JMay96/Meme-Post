{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\src\\\\pages\\\\CreateMemePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport \"../styles/CreateMemePage.css\";\nimport Meme from \"../components/Meme/\";\nexport default function CreateMemePage() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      templates = _useState2[0],\n      setTemplates = _useState2[1]; //tmeplates stores all the meme img's retrieved from API\n\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      template = _useState4[0],\n      setTemplate = _useState4[1]; //template stores which image the user chose to use\n\n\n  useEffect(function () {\n    fetch(\"https://api.imgflip.com/get_memes\").then(function (x) {\n      return x.json().then(function (res) {\n        return setTemplates(res.data.memes);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \"Create a Meme\"), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"meme-display-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, template && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Meme, {\n    template: template,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 25\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Title of Meme\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    ref: passwordRef,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"password-confirm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, \"Re-Enter Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    ref: passwordConfRef,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    disabled: loading,\n    className: \"w-100\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, \"Sign Up\"))), !template && templates.map(function (template) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      className: \"meme-img ml-2 mt-2\",\n      key: template.id,\n      src: template.url,\n      alt: template.name,\n      onClick: function onClick() {\n        setTemplate(template);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    });\n  })));\n}","map":{"version":3,"sources":["C:/Users/Siraceddin/Desktop/HTML STUFF/HW/project-3/client/src/pages/CreateMemePage.js"],"names":["React","useEffect","useState","Container","Form","Meme","CreateMemePage","templates","setTemplates","template","setTemplate","fetch","then","x","json","res","data","memes","passwordRef","passwordConfRef","loading","map","id","url","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport {Container, Form} from \"react-bootstrap\";\r\nimport \"../styles/CreateMemePage.css\";\r\nimport Meme from \"../components/Meme/\";\r\n\r\nexport default function CreateMemePage() {\r\n\r\n    \r\n    const [templates, setTemplates] = useState([]); //tmeplates stores all the meme img's retrieved from API\r\n    const [template, setTemplate] = useState(null); //template stores which image the user chose to use\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(x => x.json().then(res => setTemplates(res.data.memes))\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Create a Meme</h1>\r\n            <Container fluid className=\"meme-display-container\">\r\n                {template && (\r\n                    <>\r\n                        <Meme template={template}/>\r\n                        <Form>\r\n                        <Form.Group id=\"email\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control placeholder=\"Title of Meme\" />\r\n                        </Form.Group>\r\n                        <Form.Group id=\"password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" ref={passwordRef} required />\r\n                        </Form.Group>\r\n                        <Form.Group id=\"password-confirm\">\r\n                        <Form.Label>Re-Enter Password</Form.Label>\r\n                        <Form.Control type=\"password\" ref={passwordConfRef} required />\r\n                        </Form.Group>\r\n                        <Button disabled={loading} className=\"w-100\" type=\"submit\">Sign Up</Button>\r\n                    </Form>\r\n                  </>\r\n                )}\r\n                {!template && templates.map((template) => {\r\n                    return (\r\n                        <img             \r\n                            className=\"meme-img ml-2 mt-2\" \r\n                            key={template.id} \r\n                            src={template.url} \r\n                            alt={template.name}\r\n                            onClick={() => {\r\n                                setTemplate(template)\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n            </Container>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}