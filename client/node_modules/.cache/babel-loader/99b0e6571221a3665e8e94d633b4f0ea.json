{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Siraceddin\\\\Desktop\\\\HTML STUFF\\\\HW\\\\project-3\\\\client\\\\src\\\\pages\\\\CreateMemePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Form, Button } from \"react-bootstrap\";\nimport \"../styles/CreateMemePage.css\";\nimport Meme from \"../components/Meme/\";\n\nvar objectToQueryParam = function objectToQueryParam(obj) {\n  var params = Object.entries(obj).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return \"\".concat(key, \"=\").concat(value);\n  });\n  return '?' + params.join(\"&\");\n};\n\nexport default function CreateMemePage() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      templates = _useState2[0],\n      setTemplates = _useState2[1]; //tmeplates stores all the meme img's retrieved from API\n\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      template = _useState4[0],\n      setTemplate = _useState4[1]; //template stores which image the user chose to use\n\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      topText = _useState6[0],\n      setTopText = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      bottomText = _useState8[0],\n      setBottomText = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      title = _useState10[0],\n      setTitle = _useState10[1];\n\n  useEffect(function () {\n    fetch(\"https://api.imgflip.com/get_memes\").then(function (x) {\n      return x.json().then(function (res) {\n        return setTemplates(res.data.memes);\n      });\n    });\n  }, []);\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var params, response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              console.log(title);\n              params = {\n                template_id: template.id,\n                text0: topText,\n                text1: bottomText,\n                username: \"MemePost\",\n                password: \"memePost001\"\n              }; //will take all the parameters needed to make the meme and send it to their api\n\n              _context.next = 5;\n              return fetch(\"https://api.imgflip.com/caption_image\".concat(objectToQueryParam(params)));\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return response.json();\n\n            case 8:\n              data = _context.sent;\n              console.log(data);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Create a Meme\"), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"meme-display-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, template && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Meme, {\n    template: template,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 33\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Title of Meme\",\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    value: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"top-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }\n  }, \"Top-Text\"), /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"top-text\",\n    onChange: function onChange(e) {\n      return setTopText(e.target.value);\n    },\n    value: topText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"bottom-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 33\n    }\n  }, \"Bottom-Text\"), /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"bottom-text\",\n    onChange: function onChange(e) {\n      return setBottomText(e.target.value);\n    },\n    value: bottomText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }\n  }, \"Create Meme\"))), !template && templates.map(function (template) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      className: \"meme-img ml-2 mt-2\",\n      key: template.id,\n      src: template.url,\n      alt: template.name,\n      onClick: function onClick() {\n        setTemplate(template);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    });\n  })));\n}","map":{"version":3,"sources":["C:/Users/Siraceddin/Desktop/HTML STUFF/HW/project-3/client/src/pages/CreateMemePage.js"],"names":["React","useEffect","useState","Container","Form","Button","Meme","objectToQueryParam","obj","params","Object","entries","map","key","value","join","CreateMemePage","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","title","setTitle","fetch","then","x","json","res","data","memes","handleSubmit","event","preventDefault","console","log","template_id","id","text0","text1","username","password","response","e","target","url","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport {Container, Form, Button} from \"react-bootstrap\";\r\nimport \"../styles/CreateMemePage.css\";\r\nimport Meme from \"../components/Meme/\";\r\n\r\nconst objectToQueryParam = (obj) => {\r\n    const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`)\r\n    return '?' + params.join(\"&\")\r\n}\r\n\r\nexport default function CreateMemePage() {\r\n\r\n    \r\n    const [templates, setTemplates] = useState([]); //tmeplates stores all the meme img's retrieved from API\r\n    const [template, setTemplate] = useState(null); //template stores which image the user chose to use\r\n    const [topText, setTopText] = useState('');\r\n    const [bottomText, setBottomText] = useState('');\r\n    const [title, setTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(x => x.json().then(res => setTemplates(res.data.memes))\r\n        );\r\n    }, []);\r\n\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        console.log(title);\r\n\r\n        const params = {\r\n            template_id: template.id,\r\n            text0: topText,\r\n            text1: bottomText,\r\n            username: \"MemePost\",\r\n            password: \"memePost001\"\r\n\r\n        }\r\n\r\n        //will take all the parameters needed to make the meme and send it to their api\r\n        const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\r\n\r\n        //url of finished meme from API\r\n        const data = await response.json()\r\n        console.log(data);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Create a Meme</h1>\r\n            <Container fluid className=\"meme-display-container\">\r\n                {template && (\r\n                    <>\r\n                        <Meme template={template}/>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"title\">\r\n                                <Form.Label>Title</Form.Label>\r\n                                <Form.Control placeholder=\"Title of Meme\" onChange={e => setTitle(e.target.value)} value={title}/>\r\n                            </Form.Group>\r\n                            <Form.Group id=\"top-text\">\r\n                                <Form.Label>Top-Text</Form.Label>\r\n                                <Form.Control placeholder=\"top-text\" onChange={e => setTopText(e.target.value)} value={topText}/>\r\n                            </Form.Group>\r\n                            <Form.Group id=\"bottom-text\">\r\n                                <Form.Label>Bottom-Text</Form.Label>\r\n                                <Form.Control  placeholder=\"bottom-text\"  onChange={e => setBottomText(e.target.value)} value={bottomText}/>\r\n                            </Form.Group>\r\n                            <Button className=\"btn btn-primary\" type=\"submit\">Create Meme</Button>\r\n                        </Form>\r\n                  </>\r\n                )}\r\n                {!template && templates.map((template) => {\r\n                    return (\r\n                        <img             \r\n                            className=\"meme-img ml-2 mt-2\" \r\n                            key={template.id} \r\n                            src={template.url} \r\n                            alt={template.name}\r\n                            onClick={() => {\r\n                                setTemplate(template)\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n            </Container>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}